#!/bin/bash
if [ $# -eq 0 ]; then
    echo "No arguments supplied... Must supply at least a project name as first argument..." 
    exit -1
fi

PROJECT_NAME=$1
shift

SRC_NAME=src # Name of the folder containing the source files
PROJECTS_FOLDER=${XC_ROOT}/$SRC_NAME/projects
LIBS_FOLDER=${XC_ROOT}/$SRC_NAME/libraries

PROJECT_DIR=$PROJECTS_FOLDER/$PROJECT_NAME
if [ -d "$PROJECT_DIR" ]; then
  ### Take action if $PROJECT_DIR exists ###
  echo "Project Found in ${PROJECT_DIR}..."
else
  ###  Control will jump here if $PROJECT_DIR does NOT exists ###
  echo "Error: Project $PROJECT_NAME not found...... available projects:"
  ls "$PROJECTS_FOLDER" -1
  echo "------------------------------------------------------------"
  exit -1
fi




SYNC_SAMPLES=0
CLEAN=0
CLEAN_REMOTE=0
RUN_PROJECT=1
RUN_MODE=foreground
FETCH_PRESETS=0
SYNC_PRESETS=0
BUILD_PROJECT=1
SYNC_PROJECT=1
CONNECT=1
CHANGE_STARTUP=0
ENABLE_STARTUP=1
RUN_IN_LOOP=1
IDE_RUN=-1
IDE_STARTUP=-1
while [ -n "$1" ]
do
	case $1 in
		-c)
			shift;
			COMMAND_ARGS="$1";
		;;
		-b)
			RUN_MODE=screen;
		;;
		-f)
			RUN_MODE=foreground;
		;;
		-s)
			RUN_MODE=screenfg;
		;;
		-n)
			RUN_MODE=none;
			RUN_PROJECT=0;
		;;
		-ns)
			SYNC_PROJECT=0;
		;;
		-nb)
			BUILD_PROJECT=0;
		;;
		-nc)
			CONNECT=0;
		;;
		--clean)
			CLEAN=1;
			CLEAN_REMOTE=2;
		;;
		--cleanall)
			CLEAN=2;
			CLEAN_REMOTE=2;
		;;
		--clean-remote)
			CLEAN_REMOTE=2;
		;;
		--sync-samples)
			SYNC_SAMPLES=1;
		;;
		--ip)
			shift
			XC_IP=$1;
		;;
		--fetch-presets)
			FETCH_PRESETS=1;
		;;
		--sync-presets)
			SYNC_PRESETS=1;
		;;
		--startup)
			ENABLE_STARTUP=1;
			RUN_IN_LOOP=0;
			CHANGE_STARTUP=1;
		;;
		--startuploop)
			ENABLE_STARTUP=1;
			RUN_IN_LOOP=1;
			CHANGE_STARTUP=1;
		;;
		--nostartup)
			ENABLE_STARTUP=0;
			RUN_IN_LOOP=0;
			CHANGE_STARTUP=1;
		;;	
		--ide-start)
			IDE_RUN=1;
		;;	
		--ide-stop)
			IDE_RUN=0;
		;;			
		--ide-startup)
			IDE_STARTUP=1;
		;;	
		--ide-nostartup)
			IDE_STARTUP=0;
		;;	
	esac
	shift
done

BASEDIR=$(dirname "$0")
export XC_IP=${XC_IP:=192.168.6.2}
export XC_ROOT=${XC_ROOT:="`realpath $BASEDIR/..`"}
export XC_CL_OPTS=${XC_CL_OPTS:="-X 0"}
export XC_USER=${XC_USER:=root}
export XC_SSH=${XC_USER}@${XC_IP}


xcExec() {
    ssh -o LogLevel=ERROR $XC_SSH "$*"
}

#echo "ENABLE_STARTUP: $ENABLE_STARTUP"
#echo "RUN_IN_LOOP: $RUN_IN_LOOP"


if [ $BUILD_PROJECT -eq 1 ]; then 
	echo "Building before synching...."
	if [ $CLEAN -eq 2 ]; then
		echo "Cleaning All...."
		make cleanall
	elif [ $CLEAN -eq 1 ]; then
		echo "Cleaning Project $PROJECT_NAME...."
		make clean PROJECT=$PROJECT_NAME
	fi
	shopt -s dotglob
	find $LIBS_FOLDER/* -prune -type d | while IFS= read -r d; do 
		echo "Syncing $(basename $d) library to sysroot...."
		rsync -ac --out-format="   %n" --no-t --delete-after --exclude=.git* $d/ ${XC_ROOT}/sysroot/root/Bela/libraries/$(basename $d)/ #trailing slashes used here make sure rsync does not create another folder inside the target folder
	done
	
	echo "Building Project: $PROJECT_NAME...."
	make -j8 PROJECT=$PROJECT_NAME
	echo "Build done..."
fi


if [ $CONNECT -eq 1 ]; then
	ping -c 1 -t 1 $XC_IP >/dev/null 2>&1 
	if [ $? -ne 0 ]; then
	    echo WARNING: unable to connect to ${XC_IP}, check XC_IP?
	    exit -1
	fi
else
	exit 1
fi

echo "Syncing time: $(date) to $XC_SSH...."
ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 $XC_SSH "date -s \"`date '+%Y%m%d %T %z'`\" > /dev/null"
echo "done..."

# Define default make command for project
MAKE_COMMAND="make QUIET=true --no-print-directory -C ~/Bela PROJECT='$PROJECT_NAME' CL='$XC_CL_OPTS $COMMAND_ARGS'"

# IDE Settings
if [ $IDE_RUN -eq 1 ]; then
	ssh $XC_SSH "$MAKE_COMMAND idestart" 
elif [ $IDE_RUN -eq 0 ]; then
	ssh $XC_SSH "$MAKE_COMMAND idestop"
fi

if [ $IDE_STARTUP -eq 1 ]; then
	ssh $XC_SSH "$MAKE_COMMAND idestartup" 
	echo "done..."
elif [ $IDE_STARTUP -eq 0 ]; then
	ssh $XC_SSH "$MAKE_COMMAND idenostartup"
	echo "done..."
fi

# Sync project and libraries
if [ $SYNC_PROJECT -eq 1 ]; then
	if [ $CLEAN_REMOTE -eq 2 ]; then
		shopt -s dotglob
		find $LIBS_FOLDER/* -prune -type d | while IFS= read -r d; do
			LIBNAME=$(basename $d) 
			echo "Cleaning Remote Library $LIBNAME...."
			ssh $XC_SSH "rm -rf ~/Bela/libraries/$LIBNAME/build/*" &
		done
		echo "Cleaning Remote Project $PROJECT_NAME...."
		ssh $XC_SSH "$MAKE_COMMAND clean"
	elif [ $CLEAN_REMOTE -eq 1 ]; then
		echo "Cleaning Remote Project $PROJECT_NAME...."
		ssh $XC_SSH "$MAKE_COMMAND clean"
	fi
	shopt -s dotglob
	find $LIBS_FOLDER/* -prune -type d | while IFS= read -r d; do
		LIBNAME=$(basename $d) 
		echo "Syncing $LIBNAME library to $XC_SSH...."
		rsync -ac --out-format="   %n" --no-t --delete-after --exclude=.git* --exclude=build $d/ $XC_SSH:Bela/libraries/$LIBNAME/ #trailing slashes used here make sure rsync does not create another folder inside the target folder
		rsync -ac --out-format="   %n" --no-t --delete-after ${XC_ROOT}/build/$SRC_NAME/libraries/$LIBNAME/ $XC_SSH:Bela/libraries/$LIBNAME/build/  
	done
	echo "Syncing Project: $PROJECT_NAME to $XC_SSH...."
	rsync -ac --out-format="   %n" --no-t --delete-after --exclude=Presets --exclude=$PROJECT_NAME --exclude=build ${PROJECT_DIR}/ $XC_SSH:Bela/projects/$PROJECT_NAME/  
	rsync -ac --out-format="   %n" --no-t --delete-after --exclude=Makefile.inc ${XC_ROOT}/build/$SRC_NAME/projects/$PROJECT_NAME/ $XC_SSH:Bela/projects/$PROJECT_NAME/build/  
	rsync -ac --out-format="   %n" --no-t ${XC_ROOT}/build/$PROJECT_NAME $XC_SSH:Bela/projects/$PROJECT_NAME/
fi

# Sync the samples library
if [ $SYNC_SAMPLES -eq 1 ]; then
	echo "Syncing Samples library to $XC_SSH...."
	rsync -ac --out-format="   %n" --no-t --delete-after ${XC_ROOT}/../samples/ $XC_SSH:Bela/samples/
fi

# Sync presets from Bela to Computer
if [ $FETCH_PRESETS -eq 1 ]; then 
	echo "Fetching Presets from project: $PROJECT_NAME on $XC_SSH...."
	rsync -ac --out-format="   %n" --no-t $XC_SSH:Bela/projects/$PROJECT_NAME/Presets/ ${XC_ROOT}/Bela/projects/$PROJECT_NAME/Presets/  
	exit 1
fi

# Sync presets from computer to Bela
if [ $SYNC_PRESETS -eq 1 ]; then
	if [ -d "$PROJECT_DIR" ]; then
		echo "Syncing Presets to $XC_SSH:Bela/project/$PROJECT_NAME/Presets"
		rsync -ac --out-format="   %n" --no-t ${XC_ROOT}/Bela/projects/$PROJECT_NAME/Presets/ $XC_SSH:Bela/projects/$PROJECT_NAME/Presets/
	else
		###  Control will jump here if $PROJECT_DIR does NOT exists ###
		echo "--sync-presets: ${PROJECT_DIR} not found."
	fi
fi

# Change the startup settings
if [ $CHANGE_STARTUP -eq 1 ]; then
	if [ $ENABLE_STARTUP -eq 0 ]; then
	    ssh $XC_SSH "$MAKE_COMMAND nostartup" 
	elif [ $RUN_IN_LOOP -eq 1 ]; then
		echo "Setting $PROJECT_NAME as startuploop project..."
		ssh $XC_SSH "$MAKE_COMMAND startuploop" 
	else [ $RUN_IN_LOOP -eq 0 ]; 
		echo "Setting $PROJECT_NAME as startup project..."
		ssh $XC_SSH "$MAKE_COMMAND startup" 
	fi
fi

# Run the project
if [ $RUN_PROJECT -eq 1 ]; then
	echo "Running Project: $PROJECT_NAME on $XC_SSH...."
	case $RUN_MODE in
		#Â Sorry for repeating the options, but "ssh / ssh -t" makes things complicated
		foreground)
			ssh -t $XC_SSH "$MAKE_COMMAND run" || exit 1
		;;
		screen)
			ssh $XC_SSH "$MAKE_COMMAND runscreen"
		;;
		screenfg)
			ssh -t $XC_SSH "$MAKE_COMMAND runscreenfg"
		;;
	esac
fi
